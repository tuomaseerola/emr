
# Ch. 9 â€“ Key-finding

Install `music21` and other elements needed to run the environment
Press play and wait for all commands to be executed - this initial command might take some time as it needs to build the `music21` environment.

```{python}
#| echo: false
#| eval: false
!pip install --upgrade music21
!add-apt-repository ppa:mscore-ubuntu/mscore-stable -y
!apt-get update
!apt-get install musescore
!apt-get install xvfb
!sh -e /etc/init.d/x11-common start
import os
os.putenv('DISPLAY', ':99.0')
!start-stop-daemon --start --pidfile /var/run/xvfb.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1024x768x24 -ac +extension GLX +render -noreset
from music21 import *
us = environment.UserSettings()
us['musescoreDirectPNGPath'] = '/usr/bin/mscore'
us['directoryScratch'] = '/tmp'

!wget https://raw.githubusercontent.com/tuomaseerola/music21/master/bwv306.musicxml
```

## Key-finding

Key-finding algorithm applied to an example excerpt (`bach/bwv30.6`).

```{python}
import sys
from music21 import *                     # activate library
import pandas as pd
```

```{python}
bwv30_6 = corpus.parse('bach/bwv30.6.xml')# 30.6
print(bwv30_6.analyze('key.krumhanslkessler'))
bwv30_6_3meas = bwv30_6.measures(1,4) # First 3 measures

KK = analysis.discrete.KrumhanslKessler() # Key profile
wa = analysis.windowed.WindowedAnalysis(bwv30_6_3meas, KK)
a,b = wa.analyze(2, windowType='overlap')

keyclar=[]; mode=[]; key=[]
for x in range(len(a)):
    key.append(a[x][0])
    mode.append(a[x][1])
    keyclar.append(a[x][2])
data=pd.DataFrame({'key':key,'mode':mode,'r':keyclar})
print(data)
```

## Tension

Analysis of tonal tension using the model by Herremans and Chew (2016), implemented in `partitura` library for Python.

```{python}
#| echo: false
#| eval: false
! pip install partitura
```

```{python}
#| echo: true
#| eval: true
import partitura
import numpy as np
```

```{python}
part = partitura.load_musicxml('data/bwv306.musicxml')
tonal_tension = partitura.musicanalysis.estimate_tonaltension(part, ss='onset')
x = getattr(tonal_tension['onset_beat'][0:50], "tolist", lambda: value)()
y = tonal_tension['cloud_momentum'][0:50]

d = {'beat': x,'tension': y}
df = pd.DataFrame(data=d)
print(df)
```

### References

- Herremans, D., & Chew, E. (2016). Tension ribbons: Quantifying and visualising tonal tension. Second International Conference on Technologies for Music Notation and Representation. _TENOR, 2_.


